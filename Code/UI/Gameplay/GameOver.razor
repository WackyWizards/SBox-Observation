@using System;
@using Sandbox.UI;

@namespace Observation.UI
@attribute [Hud( true )]
@inherits Panel

@* ReSharper disable CSharpWarnings::CS8974 *@
<root>
	<label class="title" @ref="_title">@GetTitle()</label>
	<label class="sub-title" @ref="_subTitle">@GetSubTitle( _isWin, _loseReason )</label>

	@if ( AnomalyManager.Instance is {} anomalyManager )
	{
		if ( anomalyManager.ActiveAnomalies.Any() )
		{
			<div class="missed-anomalies">
				<label class="title">Missed Anomalies</label>
				@foreach ( var anomaly in anomalyManager.ActiveAnomalies )
				{
					var type = anomaly.Type;

					if ( type is Anomaly.AnomalyType.Rock )
					{
						<label>??? in ???</label>
					}
					else
					{
						<label>@( type.GetTitle() ) in @( anomaly.Room )</label>
					}
				}
			</div>
		}
		
		<div class="rank">
			<label class="actual-rank">Rank: @( anomalyManager.Rank )</label>
			<label class="percentage">@( anomalyManager.SuccessRate )%</label>
		</div>
	}

	<div class="button-container">
		<button icon="refresh" @onclick="@PlayAgain">Play Again</button>
		<button icon="home" @onclick="@Return">Return To Menu</button>
	</div>
</root>

@code {
	#nullable enable

	private bool _isWin;
	private GameManager.LoseReason _loseReason = GameManager.LoseReason.TooManyAnomalies;

	private Label? _title;
	private Label? _subTitle;

	private string GetTitle()
	{
		return _isWin ? "Shift Complete" : "Notice Of Dismissal";
	}

	private static string GetSubTitle( bool victory, GameManager.LoseReason reason )
	{
		return victory ? "Congratulations!" : reason.GetDescription();
	}

	public void OnGameEnd( bool victory )
	{
		_isWin = victory;
	}

	public void OnGameLose( GameManager.LoseReason reason )
	{
		_isWin = false;
		_loseReason = reason;
	}

	private static void PlayAgain()
	{
		MapManager.Instance?.Restart();
	}

	private static void Return()
	{
		GameManager.Instance?.ToMenu();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( _isWin, _loseReason, _title?.Text, _subTitle?.Text );
	}
}
