@using System;
@using Sandbox.UI;

@namespace Observation.UI
@attribute [Hud( true )]
@inherits Panel

@* ReSharper disable CSharpWarnings::CS8974 *@
<root>
	<div class="main">
		<label class="title" @ref="Title">#ui.report.confirm.title</label>
		<label class="text" IsRich="@( true )" @ref="_text">@_localizedText</label>
		@if ( AnomalyType == Anomaly.AnomalyType.Rock )
		{
			<label class="text" IsRich="@( true )">#report.rock.confirm.text</label>
		}

		<div class="button-container">
			<button icon="check_circle" @onclick="@Confirm">#ui.button.yes</button>
			<button icon="cancel" @onclick="@Deny">#ui.button.no</button>
		</div>
	</div>
</root>

@code {
#nullable enable

	private Label? Title { get; set; }

	private string RoomName { get; set; } = "N/A";

	private Anomaly.AnomalyType AnomalyType { get; set; }

	private Action? OnConfirm { get; set; }
	private Action? OnDeny { get; set; }

	private Label? _text;
	private string? _localizedText;

	public void Show( Anomaly.AnomalyType type, string room, Action? onConfirm = null, Action? onDeny = null )
	{
		AnomalyType = type;
		RoomName = room;
		_localizedText = GetFormattedText();

		if ( onConfirm is not null )
		{
			OnConfirm = onConfirm;
		}

		if ( onDeny is not null )
		{
			OnDeny = onDeny;
		}

		this.Show();
	}

	private void Confirm()
	{
		OnConfirm?.Invoke();
		this.Hide();
	}

	private void Deny()
	{
		OnDeny?.Invoke();
		this.Hide();
	}

	private string GetFormattedText()
	{
		const string key = "ui.report.confirm.text";
		var confirmationPhrase = Language.GetPhrase( key );

		var anomalyTypeTitle = AnomalyType.GetTitle();
		var typeDisplayName = anomalyTypeTitle.StartsWith( "#" )
			? Language.GetPhrase( anomalyTypeTitle[1..] )
			: anomalyTypeTitle;

		var roomDisplayName = RoomName.StartsWith( "#" )
			? Language.GetPhrase( RoomName[1..] )
			: RoomName;

		return string.Format( confirmationPhrase, typeDisplayName, roomDisplayName );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Title, Title?.Text, AnomalyType, _text, _text?.Text, _localizedText );
	}
}
