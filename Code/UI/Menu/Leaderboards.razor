@using Sandbox.Services;

@namespace Observation.UI
@inherits MenuSubPanel

@* ReSharper disable CSharpWarnings::CS8974 *@
<root class="hidden">
	<div class="tab-selection">
		<button class="@(_selectedTab == 0 ? "disabled" : "")" @onclick="@( () => SelectTab( 0 ) )">#ui.leaderboards.tab.leaderboards</button>
		<button class="@(_selectedTab == 1 ? "disabled" : "")" @onclick="@( () => SelectTab( 1 ) )">#ui.leaderboards.tab.globalstats</button>
		<button class="@(_selectedTab == 2 ? "disabled" : "")" @onclick="@( () => SelectTab( 2 ) )">#ui.leaderboards.tab.localstats</button>
	</div>

	<div class="tabs">
		<div class="tab @( _selectedTab == 0 ? "" : "hidden" )">
			<label class="title">#ui.leaderboards.tab.leaderboards</label>

			<div class="subtab-selection">
				<button @onclick="@( () => SelectLeaderboardTab( 0 ) )" class="@( _selectedLeaderboardTab == 0 ? "disabled" : "" )">#ui.leaderboards.boards.srank</button>
				<button @onclick="@( () => SelectLeaderboardTab( 1 ) )" class="@( _selectedLeaderboardTab == 1 ? "disabled" : "" )">#ui.leaderboards.boards.completions</button>
			</div>

			<div class="subtab">
				@switch ( _selectedLeaderboardTab )
				{
					case 0:
						{
							<label class="sub-title">#ui.leaderboards.boards.srank</label>
							if ( _sRankBoard is not null )
							{
								<div class="leaderboard">
									@foreach ( var entry in _sRankBoard.Entries )
									{
										<div
											class="entry @GetRank( (int)entry.Rank ) @(IsMe( entry.SteamId ) ? "me" : "")">
											<label class="entry-rank">@(entry.Rank).</label>
											<img class="entry-avatar" src="avatar:@(entry.SteamId)" alt=""/>
											<label class="entry-displayname">@(entry.DisplayName)</label>
											<label class="entry-value">@(entry.Value)</label>
										</div>
									}
								</div>
							}
							break;
						}
					case 1:
						{
							<label class="sub-title">#ui.leaderboards.boards.completions</label>
							if ( _winsBoard is not null )
							{
								<div class="leaderboard">
									@foreach ( var entry in _winsBoard.Entries )
									{
										<div
											class="entry @GetRank( (int)entry.Rank ) @(IsMe( entry.SteamId ) ? "me" : "")">
											<label class="entry-rank">@(entry.Rank).</label>
											<img class="entry-avatar" src="avatar:@(entry.SteamId)" alt=""/>
											<label class="entry-displayname">@(entry.DisplayName)</label>
											<label class="entry-value">@(entry.Value)</label>
										</div>
									}
								</div>
							}
							break;
						}
				}
			</div>
		</div>

		<div class="tab @( _selectedTab == 1 ? "" : "hidden" )">
			<label class="title">#ui.leaderboards.tab.globalstats</label>
			<div class="stats">
				@{
					var globalStats = Stats.GetGlobalStats( Game.Ident );
					var statGroups = new[]
					{
						("#ui.stats.wins", globalStats.Get( "Wins" )),
						("#ui.stats.losses", globalStats.Get( "Losses" )),
						("#ui.stats.restarts", globalStats.Get( "Restarts" )),
						("#ui.stats.srank", globalStats.Get( "Wins_with_rank_S" )),
						("#ui.stats.arank", globalStats.Get( "Wins_with_rank_A" )),
						("#ui.stats.brank", globalStats.Get( "Wins_with_rank_B" )),
						("#ui.stats.crank", globalStats.Get( "Wins_with_rank_C" )),
						("#ui.stats.drank", globalStats.Get( "Wins_with_rank_D" )),
						("#ui.stats.erank", globalStats.Get( "Wins_with_rank_E" )),
						("#ui.stats.reportsuccess", globalStats.Get( "report_success" )),
						("#ui.stats.reportsuccessextra", globalStats.Get( "report_success_extra" )),
						("#ui.stats.reportsuccessmovement", globalStats.Get( "report_success_movement" )),
						("#ui.stats.reportsuccessmanipulation", globalStats.Get( "report_success_manipulation" )),
						("#ui.stats.reportsuccessdisappearance", globalStats.Get( "report_success_disappearance" )),
						("#ui.stats.reportsuccessaudio", globalStats.Get( "report_success_audio" )),
						("#ui.stats.reportsuccesscameramalfunction", globalStats.Get( "report_success_cameramalfunction" )),
						("#ui.stats.reportsuccessintruder", globalStats.Get( "report_success_intruder" )),
						("#ui.stats.reportsuccessother", globalStats.Get( "report_success_other" )),
						("#ui.stats.reportfail", globalStats.Get( "report_fail" )),
						("#ui.stats.reportfailextra", globalStats.Get( "report_fail_extra" )),
						("#ui.stats.reportfailmovement", globalStats.Get( "report_fail_movement" )),
						("#ui.stats.reportfailmanipulation", globalStats.Get( "report_fail_manipulation" )),
						("#ui.stats.reportfaildisappearance", globalStats.Get( "report_fail_disappearance" )),
						("#ui.stats.reportfailaudio", globalStats.Get( "report_fail_audio" )),
						("#ui.stats.reportfailcameramalfunction", globalStats.Get( "report_fail_cameramalfunction" )),
						("#ui.stats.reportfailintruder", globalStats.Get( "report_fail_intruder" )),
						("#ui.stats.reportfailother", globalStats.Get( "report_fail_other" )),
					};
				}

				@foreach ( var (label, stat) in statGroups )
				{
					<div>
						<label>@( label )</label>:
						<label>@( stat.Sum )</label>
					</div>
				}
			</div>
		</div>

		<div class="tab @( _selectedTab == 2 ? "" : "hidden" )">
			<label class="title">#ui.leaderboards.tab.localstats</label>
			<div class="stats">
				@{
					var localStats = Stats.GetLocalPlayerStats( Game.Ident );
					var personalStatGroups = new[]
					{
						("#ui.stats.wins", localStats.Get( "Wins" )),
						("#ui.stats.losses", localStats.Get( "Losses" )),
						("#ui.stats.restarts", localStats.Get( "Restarts" )),
						("#ui.stats.srank", localStats.Get( "Wins_with_rank_S" )),
						("#ui.stats.arank", localStats.Get( "Wins_with_rank_A" )),
						("#ui.stats.brank", localStats.Get( "Wins_with_rank_B" )),
						("#ui.stats.crank", localStats.Get( "Wins_with_rank_C" )),
						("#ui.stats.drank", localStats.Get( "Wins_with_rank_D" )),
						("#ui.stats.erank", localStats.Get( "Wins_with_rank_E" )),
						("#ui.stats.reportsuccess", localStats.Get( "report_success" )),
						("#ui.stats.reportsuccessextra", localStats.Get( "report_success_extra" )),
						("#ui.stats.reportsuccessmovement", localStats.Get( "report_success_movement" )),
						("#ui.stats.reportsuccessmanipulation", localStats.Get( "report_success_manipulation" )),
						("#ui.stats.reportsuccessdisappearance", localStats.Get( "report_success_disappearance" )),
						("#ui.stats.reportsuccessaudio", localStats.Get( "report_success_audio" )),
						("#ui.stats.reportsuccesscameramalfunction", localStats.Get( "report_success_cameramalfunction" )),
						("#ui.stats.reportsuccessintruder", localStats.Get( "report_success_intruder" )),
						("#ui.stats.reportsuccessother", localStats.Get( "report_success_other" )),
						("#ui.stats.reportfail", localStats.Get( "report_fail" )),
						("#ui.stats.reportfailextra", localStats.Get( "report_fail_extra" )),
						("#ui.stats.reportfailmovement", localStats.Get( "report_fail_movement" )),
						("#ui.stats.reportfailmanipulation", localStats.Get( "report_fail_manipulation" )),
						("#ui.stats.reportfaildisappearance", localStats.Get( "report_fail_disappearance" )),
						("#ui.stats.reportfailaudio", localStats.Get( "report_fail_audio" )),
						("#ui.stats.reportfailcameramalfunction", localStats.Get( "report_fail_cameramalfunction" )),
						("#ui.stats.reportfailintruder", localStats.Get( "report_fail_intruder" )),
						("#ui.stats.reportfailother", localStats.Get( "report_fail_other" )),
					};
				}

				@foreach ( var (label, stat) in personalStatGroups )
				{
					<div>
						<label>@( label )</label>:
						<label>@( stat.Sum )</label>
					</div>
				}
			</div>
		</div>
	</div>

	<div class="button-container">
		@if ( _selectedTab == 0 )
		{
			<button icon="refresh" @onclick="@( async () => { await RefreshLeaderboard(); } )">#ui.button.refresh</button>
		}
		<button icon="arrow_back" @onclick="@Return">#ui.button.return</button>
	</div>
</root>
