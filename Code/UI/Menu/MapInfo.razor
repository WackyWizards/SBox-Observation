@using System;
@using System.Threading.Tasks;
@using Sandbox.Services;

@namespace Observation.UI
@inherits MenuSubPanel

@* ReSharper disable CSharpWarnings::CS8974 *@
<root>
	@if ( Map is not null )
	{
		<div class="map">
			<div class="tab-selection">
				<button class="@( _selectedTab == 0 ? "disabled" : "" )" @onclick="@( () => SelectTab( 0 ) )">#ui.mapinfo.play</button>
				<button class="@( _selectedTab == 1 ? "disabled" : "" )" @onclick="@( () => SelectTab( 1 ) )">#ui.mapinfo.tab.leaderboard</button>
				<button class="@( _selectedTab == 2 ? "disabled" : "" )" @onclick="@( () => SelectTab( 2 ) )">#ui.mapinfo.tab.globalstats</button>
				<button class="@( _selectedTab == 3 ? "disabled" : "" )" @onclick="@( () => SelectTab( 3 ) )">#ui.mapinfo.tab.localstats</button>
			</div>
			
			<div class="tabs">
				<div class="tab @( _selectedTab == 0 ? "" : "hidden" )">
					<div class="subtab-selection">
						<button disabled="@( Map.Difficulty == Difficulty.Normal )" @onclick="@( () => SelectDifficulty( Difficulty.Normal ) )" tooltip="#ui.mapinfo.difficulty.normal.tooltip">#ui.mapinfo.difficulty.normal</button>
						<button disabled="@( Map.Difficulty == Difficulty.Hard )" @onclick="@( () => SelectDifficulty( Difficulty.Hard ) )" tooltip="#ui.mapinfo.difficulty.hard.tooltip">#ui.mapinfo.difficulty.hard</button>
					</div>
					<label class="map-name">@( Map.Name )</label>
					<div class="map-difficulty">
						<label>#ui.mapinfo.difficulty</label>:
						<label>#ui.mapinfo.difficulty.@( Map.Difficulty )</label>
					</div>
					<label class="map-description">@( Map.Description )</label>
					<div class="button-container">
						<button icon="play_arrow" @onclick="@Play">#ui.mapinfo.play</button>
						<button icon="arrow_back" @onclick="@Return">#ui.button.return</button>
					</div>
				</div>

				<div class="tab @( _selectedTab == 1 ? "" : "hidden" )">
					<label class="title">#ui.mapinfo.tab.leaderboard</label>
					<div class="subtab-selection">
						<button class="@( _selectedLeaderboardTab == 0 ? "disabled" : "" )" @onclick="@( () => SelectLeaderboardTab( 0 ) )">#ui.mapinfo.subtab.srank</button>
						<button class="@( _selectedLeaderboardTab == 1 ? "disabled" : "" )" @onclick="@( () => SelectLeaderboardTab( 1 ) )">#ui.mapinfo.subtab.completions</button>
					</div>

					<div class="subtab">
						@switch ( _selectedLeaderboardTab )
						{
							case 0:
								{
									if ( _sRankBoard is not null )
									{
										<div class="leaderboard">
											@foreach ( var entry in _sRankBoard.Entries )
											{
												<div class="entry">
													<label class="entry-rank">@( entry.Rank ).</label>
													<img class="entry-avatar" src="avatar:@( entry.SteamId )" alt="avatar"/>
													<label class="entry-displayname">@( entry.DisplayName )</label>
													<label class="entry-value">@( entry.Value )</label>
												</div>
											}
										</div>
									}
									break;
								}
							case 1:
								{
									if ( _completionsBoard is not null )
									{
										<div class="leaderboard">
											@foreach ( var entry in _completionsBoard.Entries )
											{
												<div class="entry">
													<label class="entry-rank">@( entry.Rank ).</label>
													<img class="entry-avatar" src="avatar:@( entry.SteamId )" alt="avatar"/>
													<label class="entry-displayname">@( entry.DisplayName )</label>
													<label class="entry-value">@( entry.Value )</label>
												</div>
											}
										</div>
									}
									break;
								}
						}
					</div>
				</div>

				<div class="tab @( _selectedTab == 2 ? "" : "hidden" )">
					<label class="title">#ui.mapinfo.tab.globalstats</label>
					<div class="stats">
						@{
							var globalStats = Stats.GetGlobalStats( Game.Ident );
							var mapStatGroups = new[]
							{
								("#ui.mapinfo.stats.plays", globalStats.Get( $"Plays_{Map.Ident}" )),
								("#ui.mapinfo.stats.wins", globalStats.Get( $"Wins_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.losses", globalStats.Get( $"Losses_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.restarts", globalStats.Get( $"Restarts_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.srank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_S" )),
								("#ui.mapinfo.stats.arank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_A" )),
								("#ui.mapinfo.stats.brank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_B" )),
								("#ui.mapinfo.stats.crank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_C" )),
								("#ui.mapinfo.stats.drank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_D" )),
								("#ui.mapinfo.stats.erank", globalStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_E" ))
							};
						}

						@foreach ( var (label, stat) in mapStatGroups )
						{
							<div>
								<label>@( label )</label>:
								<label>@( stat.Sum )</label>
							</div>
						}
					</div>
				</div>

				<div class="tab @( _selectedTab == 3 ? "" : "hidden" )">
					<label class="title">#ui.mapinfo.tab.localstats</label>
					<div class="stats">
						@{
							var localStats = Stats.GetLocalPlayerStats( Game.Ident );
							var personalMapStats = new[]
							{
								("#ui.mapinfo.stats.plays", localStats.Get( $"Plays_{Map.Ident}" )),
								("#ui.mapinfo.stats.wins", localStats.Get( $"Wins_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.losses", localStats.Get( $"Losses_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.restarts", localStats.Get( $"Restarts_on_map_{Map.Ident}" )),
								("#ui.mapinfo.stats.srank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_S" )),
								("#ui.mapinfo.stats.arank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_A" )),
								("#ui.mapinfo.stats.brank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_B" )),
								("#ui.mapinfo.stats.crank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_C" )),
								("#ui.mapinfo.stats.drank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_D" )),
								("#ui.mapinfo.stats.erank", localStats.Get( $"Wins_on_map_{Map.Ident}_with_rank_E" ))
							};
						}

						@foreach ( var (label, stat) in personalMapStats )
						{
							<div>
								<label>@( label )</label>:
								<label>@( stat.Sum )</label>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	}
</root>

@code {
	#nullable enable

	private int _selectedTab = 0;
	private int _selectedLeaderboardTab = 0;

	public Map? Map { get; set; }

	private Sandbox.Services.Leaderboards.Board2? _sRankBoard;
	private Sandbox.Services.Leaderboards.Board2? _completionsBoard;

	private void SelectTab( int index )
	{
		_selectedTab = index;
		if ( index == 1 )
		{
			_ = RefreshCurrentLeaderboard();
		}
	}

	private void SelectLeaderboardTab( int index )
	{
		_selectedLeaderboardTab = index;
		_ = RefreshCurrentLeaderboard();
	}

	private void SelectDifficulty( Difficulty difficulty )
	{
		if ( Map is null )
		{
			return;
		}

		Map.Difficulty = difficulty;
	}

	private async Task RefreshCurrentLeaderboard()
	{
		if ( Map is null ) return;

		switch ( _selectedLeaderboardTab )
		{
			case 0:
				_sRankBoard = Sandbox.Services.Leaderboards.GetFromStat( Game.Ident, $"Wins_on_map_{Map.Ident}_with_rank_S" );
				_sRankBoard.CenterOnMe();
				await _sRankBoard.Refresh();
				break;
			case 1:
				_completionsBoard = Sandbox.Services.Leaderboards.GetFromStat( Game.Ident, $"Wins_on_map_{Map.Ident}" );
				_completionsBoard.CenterOnMe();
				await _completionsBoard.Refresh();
				break;
		}
	}

	private void Play()
	{
		if ( Map is null )
		{
			Log.Error( "Unable to play a null map!" );
			return;
		}

		if ( Menu.IsValid() )
		{
			if ( Menu.MenuMusic.IsValid() )
			{
				Menu.MenuMusic.Stop();
			}
		}
		
		MapManager.Instance?.SetMap( Map );
		var scene = Map.Scene;
		var loadOptions = new SceneLoadOptions();
		loadOptions.SetScene( scene );
		Game.ChangeScene( loadOptions );
	}

	protected override void Return()
	{
		Delete();
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		if ( _selectedTab == 1 )
		{
			_ = RefreshCurrentLeaderboard();
		}
		base.OnAfterTreeRender( firstTime );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Map, _selectedTab, _selectedLeaderboardTab, _completionsBoard, _sRankBoard );
	}
}
