@using System;
@using Sandbox.UI;

@namespace Observation.UI
@inherits MenuSubPanel

@* ReSharper disable CSharpWarnings::CS8974 *@
<root class="hidden">
	<div class="tab-selection">
		<button @onclick="@LastTab" disabled="@IsFirstTab">&lt;</button>
		<button @onclick="@NextTab" disabled="@IsLastTab">&gt;</button>
	</div>
	
	<div class="tutorial">
		<div class="tabs" @ref="_tabs">
			<div class="tab @( CurrentTabIndex == 0 ? "" : "hidden" )">
				<label class="title">#tutorial.intro.title</label>
				<label>#tutorial.intro.text</label>
			</div>

			<div class="tab @( CurrentTabIndex == 1 ? "" : "hidden" )">
				<label class="title">#tutorial.camera.title</label>
				<label>#tutorial.camera.text</label>
				<ul>
					<li>#tutorial.camera.list.1</li>
					<li>#tutorial.camera.list.2</li>
				</ul>
			</div>

			<div class="tab @( CurrentTabIndex == 2 ? "" : "hidden" )">
				<label class="title">#tutorial.report.title</label>
				<label>#tutorial.report.text.1</label>
				<ol>
					<li>#tutorial.report.list.1</li>
					<li>#tutorial.report.list.2</li>
					<li>#tutorial.report.list.3</li>
					<li>#tutorial.report.list.4</li>
				</ol>
				<label style="flex-grow: 1; align-items: flex-end;">#tutorial.report.text.2</label>
			</div>

			<div class="tab @( CurrentTabIndex == 3 ? "" : "hidden" )">
				<label class="title">#tutorial.tips.title</label>
				<label>#tutorial.tips.text</label>
				<ul>
					<li>#tutorial.tips.list.1</li>
					<li>#tutorial.tips.list.2</li>
					<li>#tutorial.tips.list.3</li>
				</ul>
			</div>
		</div>
	</div>

	<div class="button-container">
		<button icon="arrow_back" @onclick="@Return">#ui.button.return</button>
	</div>
</root>

@code {
	#nullable enable
	
	private Panel? _tabs;
	private int CurrentTabIndex { get; set; } = 0;

	private bool IsFirstTab => CurrentTabIndex == 0;
	private bool IsLastTab => CurrentTabIndex == _tabs?.ChildrenCount - 1;

	private void NextTab()
	{
		if ( IsLastTab || _tabs == null ) return;
		CurrentTabIndex++;
		StateHasChanged();
	}

	private void LastTab()
	{
		if ( IsFirstTab ) return;
		CurrentTabIndex--;
		StateHasChanged();
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		if ( !firstTime ) return;
		base.OnAfterTreeRender( firstTime );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( CurrentTabIndex );
	}
}
